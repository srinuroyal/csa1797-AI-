import heapq

class Node:
    def __init__(self, state, parent=None, cost=0, heuristic=0):
        self.state = state
        self.parent = parent
        self.cost = cost
        self.heuristic = heuristic

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def astar_search(graph, start, goal):
    open_set = []
    closed_set = set()

    start_node = Node(state=start, cost=0)
    heapq.heappush(open_set, start_node)

    while open_set:
        current_node = heapq.heappop(open_set)

        if current_node.state == goal:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.state)

        for neighbor, cost in graph[current_node.state].items():
            if neighbor in closed_set:
                continue

            neighbor_node = Node(state=neighbor, parent=current_node, cost=current_node.cost + cost)

            # You need to provide a heuristic function to estimate the remaining cost to the goal.
            # The heuristic function should be admissible (never overestimate the cost).
            neighbor_node.heuristic = heuristic(neighbor, goal)

            if any(neighbor_node.state == node.state and neighbor_node.cost >= node.cost for node in open_set):
                continue

            heapq.heappush(open_set, neighbor_node)

    return None  # No path found

# Example usage:
def heuristic(node, goal):
    # Replace this with an appropriate heuristic function (e.g., Euclidean distance)
    return 0

graph = {
    'A': {'B': 1, 'C': 3},
    'B': {'A': 1, 'D': 4},
    'C': {'A': 3, 'D': 1},
    'D': {'B': 4, 'C': 1, 'E': 2},
    'E': {'D': 2}
}

start_node = 'A'
goal_node = 'E'

path = astar_search(graph, start_node, goal_node)
if path:
    print("Shortest Path:", path)
    total_cost = sum(graph[path[i]][path[i + 1]] for i in range(len(path) - 1))
    print("Total Cost:", total_cost)
else:
    print("No path found")
