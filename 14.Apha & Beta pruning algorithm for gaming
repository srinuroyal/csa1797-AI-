import math

# Define constants for the players
MAX_PLAYER = 'X'
MIN_PLAYER = 'O'

def is_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_terminal(board):
    return is_winner(board, MAX_PLAYER) or is_winner(board, MIN_PLAYER) or all(all(cell != ' ' for cell in row) for row in board)

def evaluate(board):
    if is_winner(board, MAX_PLAYER):
        return 1
    elif is_winner(board, MIN_PLAYER):
        return -1
    else:
        return 0

def alpha_beta_pruning(board, depth, alpha, beta, is_maximizing):
    if depth == 0 or is_terminal(board):
        return evaluate(board)

    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = MAX_PLAYER
                    eval = alpha_beta_pruning(board, depth - 1, alpha, beta, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = MIN_PLAYER
                    eval = alpha_beta_pruning(board, depth - 1, alpha, beta, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def find_best_move(board):
    best_eval = -math.inf
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = MAX_PLAYER
                eval = alpha_beta_pruning(board, 5, -math.inf, math.inf, False)
                board[i][j] = ' '
                if eval > best_eval:
                    best_eval = eval
                    best_move = (i, j)

    return best_move

def print_board(board):
    for row in board:
        print(' | '.join(row))
        print('-' * 9)

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]

    while not is_terminal(board):
        print_board(board)
        row, col = find_best_move(board)
        print(f"Computer plays: {row + 1}, {col + 1}")
        board[row][col] = MAX_PLAYER

        if is_terminal(board):
            break

        print_board(board)
        while True:
            try:
                player_move = input("Enter your move (row, col): ")
                row, col = map(int, player_move.split(','))
                if board[row - 1][col - 1] == ' ':
                    board[row - 1][col - 1] = MIN_PLAYER
                    break
                else:
                    print("Invalid move. The cell is not empty.")
            except (ValueError, IndexError):
                print("Invalid input. Please enter your move as 'row, col'.")

    print_board(board)
    if is_winner(board, MAX_PLAYER):
        print("Computer wins!")
    elif is_winner(board, MIN_PLAYER):
        print("You win!")
    else:
        print("It's a tie!")

if _name_ == '_main_':
    main()
    
         
