import numpy as np

class TreeNode:
    def _init_(self, predicted_class):
        self.predicted_class = predicted_class
        self.feature_index = None
        self.threshold = None
        self.left = None
        self.right = None

class DecisionTree:
    def _init_(self, max_depth=None):
        self.max_depth = max_depth

    def fit(self, X, y):
        self.n_classes = len(np.unique(y))
        self.n_features = X.shape[1]
        self.tree = self._grow_tree(X, y)

    def _grow_tree(self, X, y, depth=0):
        n_samples, n_features = X.shape
        n_samples_per_class = [np.sum(y == i) for i in range(self.n_classes)]
        predicted_class = np.argmax(n_samples_per_class)
        
        if (
            depth == self.max_depth
            or n_samples_per_class[predicted_class] == n_samples
        ):
            return TreeNode(predicted_class=predicted_class)
        
        feature_indices = np.arange(n_features)
        if n_features == 1:
            feature_indices = [0]

        gini = np.inf
        best_feature = None
        best_threshold = None
        best_y_left = None
        best_y_right = None

        for feature_index in feature_indices:
            thresholds = np.unique(X[:, feature_index])
            for threshold in thresholds:
                left_mask = X[:, feature_index] < threshold
                right_mask = X[:, feature_index] >= threshold
                y_left = y[left_mask]
                y_right = y[right_mask]
                if len(y_left) == 0 or len(y_right) == 0:
                    continue
                gini_left = self._gini(y_left)
                gini_right = self._gini(y_right)
                weighted_gini = (
                    (len(y_left) / n_samples) * gini_left
                    + (len(y_right) / n_samples) * gini_right
                )
                if weighted_gini < gini:
                    gini = weighted_gini
                    best_feature = feature_index
                    best_threshold = threshold
                    best_y_left = left_mask
                    best_y_right = right_mask
        
        if gini == np.inf:
            return TreeNode(predicted_class=predicted_class)
        
        left = self._grow_tree(
            X[best_y_left], y[best_y_left], depth + 1
        )
        right = self._grow_tree(
            X[best_y_right], y[best_y_right], depth + 1
        )
        node = TreeNode(predicted_class=predicted_class)
        node.feature_index = best_feature
        node.threshold = best_threshold
        node.left = left
        node.right = right
        return node

    def _gini(self, y):
        m = len(y)
        return 1.0 - sum((np.sum(y == c) / m) ** 2 for c in range(self.n_classes))

    def predict(self, X):
        return [self._predict(inputs) for inputs in X]

    def _predict(self, inputs):
        node = self.tree
        while node.left:
            if inputs[node.feature_index] < node.threshold:
                node = node.left
            else:
                node = node.right
        return node.predicted_class

# Example usage:
if _name_ == "_main_":
    X = np.array([[0, 0], [1, 1], [1, 0], [0, 1]])
    y = np.array([0, 1, 1, 0])
    
    tree = DecisionTree(max_depth=2)
    tree.fit(X, y)
    
    print("Predictions:", tree.predict(X))
